<?php

require_once 'AdaptivePayments.php'  ;
class AdaptivePayment {
	
	function __construct(){
			
		if(!defined('API_USERNAME')){
			define('API_USERNAME','nareshkumar_api1.zapbuild.com' );
		}
		if(!defined('API_PASSWORD')){
			define('API_PASSWORD','1368508650');
		}
		if(!defined('API_SIGNATURE')){
			define('API_SIGNATURE','AM59Dfi6lIAzknKULqQ0He01st9LAYAwOi5cmhij6iq1-cZNEIq3WcTz');
		}
		
			
		if(!defined('X_PAYPAL_RESPONSE_DATA_FORMAT')){
			define('X_PAYPAL_RESPONSE_DATA_FORMAT','JSON');
		}
		//--------------FOR PAYPAL
		if(!defined('PAYPAL_REDIRECT_URL')) {
			define('PAYPAL_REDIRECT_URL', 'https://www.sandbox.paypal.com/webscr&cmd=');
		}
		if(!defined('DEVELOPER_PORTAL')){
			define('DEVELOPER_PORTAL', 'https://developer.paypal.com');
		}
		if(!defined('DEVICE_ID')) {
			define('DEVICE_ID', 'PayPal_Platform_PHP_SDK');	
		}
		/**
		# Endpoint: this is the server URL which you have to connect for submitting your API request.
		Chanege to https://svcs.paypal.com/  to go live */
		if(!defined('API_BASE_ENDPOINT')){
			define('API_BASE_ENDPOINT', 'https://svcs.sandbox.paypal.com/');
		}
		
		/***** 3token API credentials *****************/
		if(!defined('API_AUTHENTICATION_MODE')){
			define('API_AUTHENTICATION_MODE','3token');
		}
		if(!defined('LOGFILENAME')){
			define('LOGFILENAME','logs/paypal_platform.log');
		}
		/**
		 * Use the following setting (false) if you are testing or using SDK against live PayPal's production server 
		 */
		if(!defined('TRUST_ALL_CONNECTION')){
			define('TRUST_ALL_CONNECTION',false);
		}
		/**
		 * Defines the SDK Version, Request and Response message formats.
		 */
		if(!defined('SDK_VERSION')){
			define('SDK_VERSION','PHP_SOAP_SDK_V1.4');
		}
		if(!defined('X_PAYPAL_APPLICATION_ID')){
			define('X_PAYPAL_APPLICATION_ID','APP-80W284485P519543T');
		}
		//Binding options -> SOAP11,XML,JSON
		if(!defined('X_PAYPAL_REQUEST_DATA_FORMAT')){
			define('X_PAYPAL_REQUEST_DATA_FORMAT','JSON');
		}
		if(!defined('X_PAYPAL_RESPONSE_DATA_FORMAT')){
			define('X_PAYPAL_RESPONSE_DATA_FORMAT','JSON');
		}
		/*
		 * IP Address of the device
		 */
		if(!defined('X_PAYPAL_DEVICE_IPADDRESS')){
			define('X_PAYPAL_DEVICE_IPADDRESS','127.0.0.1');
		}
		
		
		/**
		# API user: The user that is identified as making the call. you can
		# also use your own API username that you created on PayPal?s sandbox
		# or the PayPal live site
		*/
		/*if(!defined('API_USERNAME')){
			define('API_USERNAME', 'zrfbl_1298620336_biz_api1.163.com');
		}*/
		/**
		# API_password: The password associated with the API user
		# If you are using your own API username, enter the API password that
		# was generated by PayPal below
		# IMPORTANT - HAVING YOUR API PASSWORD INCLUDED IN THE MANNER IS NOT
		# SECURE, AND ITS ONLY BEING SHOWN THIS WAY FOR TESTING PURPOSES
		*/
		/*if(!defined('API_PASSWORD')){
			define('API_PASSWORD', '1298620354');
		}*/
		/**
		# API_Signature:The Signature associated with the API user. which is generated by paypal.
		*/
		/*if(!defined('API_SIGNATURE')){
			define('API_SIGNATURE', 'AFcWxV21C7fd0v3bYYYRCpSSRl31AeYGJ2JsUj2KzvuzhfTAc6JCSHNh');
		}*/
		/**
		# Endpoint: this is the server URL which you have to connect for submitting your API request.
		*/
		
		//define('API_ENDPOINT', 'https://api-3t.paypal.com/nvp');
		if(!defined('API_ENDPOINT')){
			define('API_ENDPOINT', 'https://api-3t.sandbox.paypal.com/nvp');
		}
		/**
		USE_PROXY: Set this variable to TRUE to route all the API requests through proxy.
		like define('USE_PROXY',TRUE);
		*/
		if(!defined('USE_PROXY')){
			define('USE_PROXY',FALSE);
		}
		/**
		PROXY_HOST: Set the host name or the IP address of proxy server.
		PROXY_PORT: Set proxy port.
		
		PROXY_HOST and PROXY_PORT will be read only if USE_PROXY is set to TRUE
		*/
		if(!defined('PROXY_HOST')){
			define('PROXY_HOST', '127.0.0.1');
		}
		/*if(!defined('API_USERNAME')){
			define('API_USERNAME', '808');
		}*/
		/* Define the PayPal URL. This is the URL that the buyer is
		   first sent to to authorize payment with their paypal account
		   change the URL depending if you are testing on the sandbox
		   or going to the live PayPal site
		   For the sandbox, the URL is
		   https://www.sandbox.paypal.com/webscr&cmd=_express-checkout&token=
		   For the live site, the URL is
		   https://www.paypal.com/webscr&cmd=_express-checkout&token=
		   */
		if(!defined('PAYPAL_URL')){
			define('PAYPAL_URL', 'https://www.sandbox.paypal.com/webscr&cmd=_express-checkout&token=');
		}
		/**
		# Version: this is the API version in the request.
		# It is a mandatory parameter for each API request.
		# The only supported value at this time is 2.3
		*/
		if(!defined('VERSION')){
			define('VERSION', '3.0');
		}	
		if(!defined('RETURN_URL')){
			define('RETURN_URL', 'http://www.hawaii.com');
		}
		if(!defined('CENCEL_URL')){
			define('CENCEL_URL', 'http://www.hawaii.com');
		}
	}
	function payment( $paymentDetails = array(array('email'=>'rajinder323-facilitator@gmail.com','amount'=>10.00))){
		$payRequest = new PayRequest();
		$payRequest->actionType = "PAY";
		$returnURL = RETURN_URL;
		$cancelURL = CENCEL_URL;
		$payRequest->cancelUrl = $cancelURL ;
		$payRequest->returnUrl = $returnURL;
		$payRequest->clientDetails = new ClientDetailsType();
		$payRequest->clientDetails->applicationId ='APP-80W284485P519543T';
		$payRequest->clientDetails->deviceId = '127001';
		$payRequest->clientDetails->ipAddress = '127.0.0.1';
		$payRequest->currencyCode = 'USD';
		$payRequest->senderEmail = 'nareshkumar@zapbuild.com' ;
		$payRequest->requestEnvelope = new RequestEnvelope();
		$payRequest->requestEnvelope->errorLanguage = 'en_US';
		
					
		/*$receiver1 = new receiver();
		$receiver1->email = 'rajind_1303302140_biz@w3syntactic.com';
		$receiver1->amount = '1.00';*/
		
		/*$receiver2 = new receiver();
		$receiver2->email = 'rajind_1299057520_biz@w3syntactic.com';
		$receiver2->amount = '1.00';*/
		
		$receiverList = array ( ) ;
		$i = 0 ;
		foreach ( $paymentDetails as $paymentDetail ){ 
			$receiverList[$i] = new receiver();
			$receiverList[$i]->email = $paymentDetail['email'];
			$receiverList[$i]->amount = $paymentDetail['amount'] ;
			$i++;
		}		
		
		//$payRequest->receiverList = //array($receiver1, $receiver2);
		
		$payRequest->receiverList = $receiverList ;
	
	
		// Create service wrapper object
		$ap = new AdaptivePayments();
	
		// invoke business method on service wrapper passing in appropriate request params
		$response = $ap->Pay($payRequest);
		
		
		$adaptiveResponce['ap'] = $ap ;
		$adaptiveResponce['response'] = $response ;
		
		return $adaptiveResponce;
	}
	
}
?>
